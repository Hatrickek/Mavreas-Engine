#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

#define PIXELS_PER_TILE 16

#define BLOCK_SIZE 16
#define MAX_NUM_LIGHTS_PER_TILE 128

struct Light {
  vec3 color;
  vec3 position;
  float intensity;
  float radius;
};

struct Frustum {
  vec4 planes[4];
};

layout(binding = 0) uniform UBO {
  mat4 projection;
  mat4 view;
  vec3 camPos;
}
u_Ubo;

layout(binding = 1) uniform UBOParams {
  float exposure;
  float gamma;
  int numLights;
  float time;
  int debugMode;
  float lodBias;
  ivec2 numThreads;
  ivec2 screenDimensions;
}
u_UboParams;

layout(binding = 2) buffer Lights { Light lights[]; };

layout(binding = 3) buffer Frustums { Frustum frustums[]; };

layout(binding = 4) buffer LightIndex { int lightIndex[]; };

layout(binding = 5) buffer LightGrid { int lightGrid[]; };

layout(binding = 6) uniform sampler2D depthSampler;

// Convert clip space coordinates to view space
vec4 ClipToView(vec4 clip) {
  // View space position.
  vec4 view = u_Ubo.projection * clip;
  // Perspective projection.
  view = view / view.w;

  return view;
}

// Convert screen space coordinates to view space.
vec4 ScreenToView(vec4 screen) {
  // Convert to normalized texture coordinates
  vec2 texCoord = screen.xy / u_UboParams.screenDimensions;

  // Convert to clip space
  vec4 clip =
      vec4(vec2(texCoord.x, texCoord.y) * 2.0f - 1.0f, screen.z, screen.w);

  return ClipToView(clip);
}

bool SphereInsidePlane(vec3 c, float r, vec3 N, float d) {
  return dot(N, c) - d < -r;
}

bool SphereInsideFrustum(vec3 c, float r, Frustum frustum, float zNear,
                         float zFar) {
  bool result = true;

  if (c.z - r > zNear || c.z + r < zFar) {
    result = false;
  }

  for (int i = 0; i < 4 && result; ++i) {
    if (SphereInsidePlane(c, r, frustum.planes[i].xyz, frustum.planes[i].w)) {
      result = false;
    }
  }

  return result;
}

layout(local_size_x = 16, local_size_y = 16) in;
void main() {
  if (gl_GlobalInvocationID.x >= u_UboParams.numThreads.x ||
      gl_GlobalInvocationID.y >= u_UboParams.numThreads.y) {
    return;
  }

  // tile index
  uint index = gl_GlobalInvocationID.y * uint(u_UboParams.numThreads.x) +
               gl_GlobalInvocationID.x;
  uint lightIndexBegin = index * MAX_NUM_LIGHTS_PER_TILE;
  uint numLightsInTile = 0;
  vec2 texcoordUnit = 1. / u_UboParams.screenDimensions;
  float zNear = -1000000.;
  float zFar = 1000000.;

  for (int i = 0; i < PIXELS_PER_TILE; ++i) {
    for (int j = 0; j < PIXELS_PER_TILE; ++j) {
      vec2 offset = vec2(i + 0.5, j + 0.5);
      vec2 texcoord =
          (gl_GlobalInvocationID.xy * PIXELS_PER_TILE + offset) * texcoordUnit;
      texcoord.y = 1. - texcoord.y;
      float depth = texture(depthSampler, texcoord).x;
      vec4 screenDepth = vec4(texcoord, depth, 1.);
      vec4 viewDepth = ScreenToView(screenDepth);

      zNear = max(zNear, viewDepth.z);
      zFar = min(zFar, viewDepth.z);
    }
  }

  float diff = zNear - zFar; // distance
  zFar -= diff;
  zNear += diff;

  // lights[index].beginPos = vec4(minDepth, maxDepth, 0., 0.);

  for (int i = 0; i < u_UboParams.numLights; ++i) {
    vec4 pos = u_Ubo.view * vec4(lights[i].position, 1.f);
    float radius = lights[i].radius;

    if (SphereInsideFrustum(pos.xyz, radius, frustums[index], zNear, zFar)) {
      lightIndex[lightIndexBegin + numLightsInTile] = i;
      numLightsInTile += 1;
      if (numLightsInTile >= MAX_NUM_LIGHTS_PER_TILE)
        break;
    }
  }

  lightGrid[index] = int(numLightsInTile);
}

#version 460 core
#pragma shader_stage(compute)
#define EPSILON 0.001

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(binding = 0) restrict writeonly uniform image2D ImgResult;
layout(binding = 1) uniform sampler2D SamplerSrc;

layout(binding = 2) uniform sampler2D in_Depth;
layout(binding = 3) uniform samplerCube in_Skybox;
layout(binding = 4) uniform sampler2D in_Normal;

layout(binding = 5) uniform UBO {
  mat4 projection;
  mat4 view;
  vec3 camPos;
}
u_Ubo;

layout(binding = 6) uniform SSRUBO {
  int samples;             // default: 30
  int binary_search_samples; // default: 8
  float max_dist;           // default: 50
}
u_SSRUBO;

vec3 SSR(vec3 normal, vec3 fragPos, float spec);
void CustomBinarySearch(vec3 samplePoint, vec3 deltaStep,
                        inout vec3 projectedSample);
vec3 ViewToNDC(vec3 viewPos);
vec3 NDCToView(vec3 ndc);

vec3 prefilteredReflection(vec3 R, float roughness) {
  const float MAX_REFLECTION_LOD = 9.0;
  float lod = roughness * MAX_REFLECTION_LOD;
  float lodf = floor(lod);
  float lodc = ceil(lod);
  vec3 a = textureLod(in_Skybox, R, lodf).rgb;
  vec3 b = textureLod(in_Skybox, R, lodc).rgb;
  return mix(a, b, lod - lodf);
}

void main() {
  ivec2 imgCoord = ivec2(gl_GlobalInvocationID.xy);
  vec2 uv = (imgCoord + 0.5) / imageSize(ImgResult);

  vec4 normalSpec = texture(in_Normal, uv);
  float depth = texture(in_Depth, uv).r;
  if (normalSpec.a < EPSILON || depth == 1.0) {
    imageStore(ImgResult, imgCoord, vec4(0.0));
    return;
  }

  vec3 fragPos = NDCToView(vec3(uv, depth) * 2.0 - 1.0);

  // world space to view space conversion for normals
  // mat3 normalToView = mat3(transpose(inverse(u_Ubo.view)));
  // normalSpec.xyz = normalize(normalToView * normalSpec.xyz);

  vec3 color = SSR(normalSpec.xyz, fragPos, normalSpec.a);

  imageStore(ImgResult, imgCoord, vec4(color * normalSpec.a, 1.0));
}

vec3 SSR(vec3 normal, vec3 fragPos, float spec) {
  // Viewpos is origin in view space
  const vec3 VIEW_POS = vec3(0.0);
  vec3 reflectDir = reflect(normalize(fragPos - VIEW_POS), normal);
  vec3 maxReflectPoint = fragPos + reflectDir * u_SSRUBO.max_dist;
  vec3 deltaStep = (maxReflectPoint - fragPos) / u_SSRUBO.samples;

  vec3 samplePoint = fragPos;
  for (int i = 0; i < u_SSRUBO.samples; i++) {
    samplePoint += deltaStep;

    vec3 projectedSample = ViewToNDC(samplePoint) * 0.5 + 0.5;
    if (any(greaterThanEqual(projectedSample.xy, vec2(1.0))) ||
        any(lessThan(projectedSample.xy, vec2(0.0))) ||
        projectedSample.z > 1.0) {
      vec3 reflection = prefilteredReflection(reflectDir, spec).rgb;
      return reflection * 0.2f;
    }

    float depth = texture(in_Depth, projectedSample.xy).r;
    if (projectedSample.z > depth) {
      CustomBinarySearch(samplePoint, deltaStep, projectedSample);
      return texture(SamplerSrc, projectedSample.xy).rgb;
    }
  }

  vec3 worldSpaceReflectDir = (inverse(u_Ubo.view) * vec4(reflectDir, 0.0)).xyz;
  return texture(in_Skybox, worldSpaceReflectDir).rgb;
}

void CustomBinarySearch(vec3 samplePoint, vec3 deltaStep,
                        inout vec3 projectedSample) {
  // Go back one step at the beginning because we know we are to far
  deltaStep *= 0.5;
  samplePoint -= deltaStep * 0.5;
  for (int i = 1; i < u_SSRUBO.binary_search_samples; i++) {
    projectedSample = ViewToNDC(samplePoint) * 0.5 + 0.5;
    float depth = texture(in_Depth, projectedSample.xy).r;

    deltaStep *= 0.5;
    if (projectedSample.z > depth) {
      samplePoint -= deltaStep;
    } else {
      samplePoint += deltaStep;
    }
  }
}

vec3 ViewToNDC(vec3 viewPos) {
  vec4 clipPos = u_Ubo.projection * vec4(viewPos, 1.0);
  return clipPos.xyz / clipPos.w;
}

vec3 NDCToView(vec3 ndc) {
  vec4 viewPos = inverse(u_Ubo.projection) * vec4(ndc, 1.0);
  return viewPos.xyz / viewPos.w;
}
#version 460 core
#pragma shader_stage(compute)

#define STEP_COUNT 1000.0

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(binding = 0) restrict writeonly uniform image2D transmittanceLUT;

layout(set = 0, binding = 1) uniform UniformBlock {
    vec3 RayleighScatterVal;
    float RayleighDensity;
    float PlanetRadius;
    float AtmosRadius;
    float MieScatterVal;
    float MieAbsorptionVal;
    float MieDensity;
    float MieAsymmetry;
    float OzoneHeight;
    float OzoneThickness;
    vec3 OzoneAbsorption;
};

vec3 GetExtinctionSum(float altitude)
{
    vec3 rayleigh = RayleighScatterVal * exp(-altitude / RayleighDensity);
    float mie = (MieScatterVal + MieAbsorptionVal) * exp(-altitude / MieDensity);
    vec3 ozone = OzoneAbsorption * max(0.0, 1.0 - abs(altitude - OzoneHeight) / OzoneThickness);

    return rayleigh + mie + ozone;
}

bool SolveQuadratic(vec3 origin, vec3 direction, float radius)
{
    float a = dot(direction, direction);
    float b = 2.0 * dot(origin, direction);
    float c = dot(origin, origin) - radius * radius;
    float discriminant = b * b - 4.0 * a * c;

    return (discriminant >= 0.0) && (b <= 0.0);
}

// Out T = distance from origin
bool GetQuadraticIntersection3D(vec3 origin, vec3 direction, float radius, out float t)
{
    float a = dot(direction, direction);
    float b = 2.0 * dot(origin, direction);
    float c = dot(origin, origin) - radius * radius;
    float discriminant = b * b - 4.0 * a * c;

    if (discriminant < 0.0)
    return false;

    if (c <= 0.0)
    t = (-b + sqrt(discriminant)) / (a * 2.0);
    else
    t = (-b + -sqrt(discriminant)) / (a * 2.0);

    return (b <= 0.0);
}

vec3 CalculateTransmittance(vec3 rayPosition, vec3 sunDirection)
{
    // We need to check if ray hits planet first.
    if (SolveQuadratic(rayPosition, sunDirection, PlanetRadius))
    {
        return vec3(0.0, 0.0, 0.0);
    }

    float distance = 0.0;
    GetQuadraticIntersection3D(rayPosition, sunDirection, AtmosRadius, distance);
    float distancePerStep = distance / STEP_COUNT;

    vec3 transmittance = vec3(0.0, 0.0, 0.0);
    for (float i = 0.0; i < STEP_COUNT; i += 1.0)
    {
        rayPosition += distancePerStep * sunDirection + 0.3;

        // classic sphere function, in this case its used as altitude from ground
        float altitude = length(rayPosition) - PlanetRadius;
        transmittance += GetExtinctionSum(altitude);
    }

    // transmittance = extinction coefficient
    return exp(-distancePerStep * transmittance);  // equation 1 from jnovak
}

void main()
{
    ivec2 imgCoord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 imgSize = imageSize(transmittanceLUT);
    if (any(greaterThanEqual(imgCoord, imgSize)))
        return;

    vec2 uv = (imgCoord + 0.5) / imgSize;
    float h = mix(PlanetRadius, AtmosRadius, uv.y);
    vec3 ray_position = vec3(0.0, h, 0.0);
    float sun_cos_theta = 2.0 * uv.x - 1.0;
    vec3 sun_dir = vec3(0.0, sun_cos_theta, sin(acos(sun_cos_theta)));

    imageStore(transmittanceLUT, imgCoord, vec4(CalculateTransmittance(ray_position, sun_dir), 1.0));
}